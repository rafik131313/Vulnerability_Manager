package com.BrupExtensionProject.burp_extension;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import burp.IBurpExtenderCallbacks;

import java.io.*;
import java.lang.reflect.Type;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class PersistenceManager {
    private static final Gson gson = new Gson();
    private static IBurpExtenderCallbacks callbacks;

    public static void setCallbacks(IBurpExtenderCallbacks callbacks) {
        PersistenceManager.callbacks = callbacks;
    }

    public static void saveVulnerabilities(List<VulnerabilityStats> vulnerabilities, String saveFolderPath) {
        Logger.log("[PersistenceManager] Starting saveVulnerabilities method");
        List<VulnerabilityStats> filteredVulnerabilities = vulnerabilities.stream()
                .filter(v -> !v.isHostHeader())
                .collect(Collectors.toList());

        Logger.log("[PersistenceManager] Filtered vulnerabilities: " + filteredVulnerabilities);

        String json = gson.toJson(filteredVulnerabilities);
        Logger.log("[PersistenceManager] Oto dane przerobione na json: " + json);
        String filePath = saveFolderPath + "/vulnerabilities.json";
        Logger.log("[PersistenceManager] File path to save: " + filePath);

        try (FileWriter writer = new FileWriter(filePath)) {
            Logger.log("[PersistenceManager] Attempting to write to file: " + filePath);
            writer.write(json);
            writer.flush();
            Logger.log("[PersistenceManager] Successfully wrote vulnerabilities to " + filePath);
        } catch (IOException e) {
            callbacks.printError("[PersistenceManager] Error saving vulnerabilities: " + e.getMessage());
            e.printStackTrace();
        }
    }

    public static List<VulnerabilityStats> loadVulnerabilities(String filePath) {
        Logger.log("[PersistenceManager] Starting loadVulnerabilities method");

        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            List<VulnerabilityStats> vulnerabilities = gson.fromJson(reader, new TypeToken<List<VulnerabilityStats>>() {}.getType());
            Logger.log("[PersistenceManager] Loaded vulnerabilities: " + vulnerabilities);
            return vulnerabilities;
        } catch (IOException e) {
            callbacks.printError("[PersistenceManager] Error loading vulnerabilities: " + e.getMessage());
            e.printStackTrace();
        }
        return Collections.emptyList();
    }
}
