package com.BrupExtensionProject.burp_extension;

import net.sourceforge.tess4j.ITesseract;
import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.TesseractException;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.concurrent.Callable;
import java.util.function.Consumer;

public class Searcher {
    private JPanel mainPanel;
    private JTextField keywordField;
    private JButton searchButton;
    private JTextArea resultsArea;
    private ScreenshotUtility screenshotUtility;
    private ITesseract tesseract;

    public Searcher(ScreenshotUtility screenshotUtility) {
        this.screenshotUtility = screenshotUtility;
        this.tesseract = new Tesseract();
        try {
            // WyodrÄ™bnij plik eng.traineddata do katalogu tymczasowego
            Path tempDir = Files.createTempDirectory("tessdata");
            Path tempTessData = tempDir.resolve("eng.traineddata");
            try (InputStream is = getClass().getResourceAsStream("/tessdata/eng.traineddata")) {
                if (is == null) {
                    throw new IOException("Resource not found: /tessdata/eng.traineddata");
                }
                Files.copy(is, tempTessData, StandardCopyOption.REPLACE_EXISTING);
            }
            this.tesseract.setDatapath(tempDir.toString());
        } catch (IOException e) {
            Logger.log("Error extracting Tesseract data file: " + e.getMessage());
        }
        initializeComponents();
    }

    private void initializeComponents() {
        mainPanel = new JPanel(new BorderLayout());

        JPanel inputPanel = new JPanel(new FlowLayout());
        keywordField = new JTextField(20);
        searchButton = new JButton("Search");

        inputPanel.add(new JLabel("Keyword:"));
        inputPanel.add(keywordField);
        inputPanel.add(searchButton);

        resultsArea = new JTextArea(20, 50);
        resultsArea.setLineWrap(true);
        resultsArea.setWrapStyleWord(true);
        resultsArea.setEditable(false);

        JScrollPane scrollPane = new JScrollPane(resultsArea);

        mainPanel.add(inputPanel, BorderLayout.NORTH);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        searchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String keyword = keywordField.getText().trim();
                if (!keyword.isEmpty()) {
                    Logger.log("Starting search for keyword: " + keyword);
                    startSearchInBackground(keyword);
                } else {
                    JOptionPane.showMessageDialog(mainPanel, "Please enter a keyword to search.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    private void startSearchInBackground(String keyword) {
        Callable<Void> task = () -> {
            searchKeywordInScreenshots(keyword);
            return null;
        };

        Consumer<Void> onSuccess = result -> {
            Logger.log("Search completed.");
            resultsArea.append("Search completed.\n");
        };

        Consumer<Exception> onError = ex -> {
            Logger.log("Error occurred during search: " + ex.getMessage());
            resultsArea.append("Error occurred during search: " + ex.getMessage() + "\n");
        };

        new Worker<>(task, onSuccess, onError).execute();
    }

    private void searchKeywordInScreenshots(String keyword) {
        resultsArea.setText("Searching for keyword: " + keyword + "\n");
        String folderPath = screenshotUtility.getSaveFolderPath();
        Logger.log("Save folder path: " + folderPath);

        File folder = new File(folderPath);
        if (folder.exists() && folder.isDirectory()) {
            Logger.log("Folder exists and is a directory: " + folderPath);
            searchInDirectory(folder, keyword);
        } else {
            Logger.log("Folder does not exist or is not a directory: " + folderPath);
            resultsArea.append("Folder does not exist or is not a directory: " + folderPath + "\n");
        }
    }

    private void searchInDirectory(File directory, String keyword) {
        File[] files = directory.listFiles();
        if (files == null) {
            Logger.log("No files found in directory: " + directory.getAbsolutePath());
            resultsArea.append("No files found in directory: " + directory.getAbsolutePath() + "\n");
            return;
        }

        for (File file : files) {
            if (file.isDirectory()) {
                Logger.log("Entering directory: " + file.getAbsolutePath());
                searchInDirectory(file, keyword);
            } else if (file.isFile() && file.getName().endsWith(".png")) {
                Logger.log("Processing file: " + file.getAbsolutePath());
                processFile(file, keyword);
            }
        }
    }

    private void processFile(File file, String keyword) {
        try {
            Logger.log("Starting OCR processing for file: " + file.getAbsolutePath());
            BufferedImage image = ImageIO.read(file);
            Logger.log("Image read successfully: " + file.getAbsolutePath());

            String result = tesseract.doOCR(image);
            Logger.log("OCR result length: " + result.length());

            if (result.contains(keyword)) {
                Logger.log("Keyword found in file: " + file.getAbsolutePath());
                resultsArea.append("Keyword found in file: " + file.getAbsolutePath() + "\n");
            } else {
                Logger.log("Keyword not found in file: " + file.getAbsolutePath());
            }
        } catch (IOException e) {
            Logger.log("Error reading file: " + file.getAbsolutePath() + " - " + e.getMessage());
        } catch (TesseractException e) {
            Logger.log("Error performing OCR on file: " + file.getAbsolutePath() + " - " + e.getMessage());
        }
    }
}
