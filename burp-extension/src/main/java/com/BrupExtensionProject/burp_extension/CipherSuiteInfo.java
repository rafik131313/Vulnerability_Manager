package com.BrupExtensionProject.burp_extension;

import burp.IBurpExtenderCallbacks;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.function.Consumer;

public class CipherSuiteInfo {

    private static IBurpExtenderCallbacks callbacks;

    public static void setCallbacks(IBurpExtenderCallbacks callbacks) {
        CipherSuiteInfo.callbacks = callbacks;
    }

    public static Map<String, String> fetchCipherSuites() {
        Map<String, String> cipherSuites = new HashMap<>();
        try {
            URL url = new URL("https://ciphersuite.info/api/cs/");
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            int responseCode = connection.getResponseCode();
            Logger.log("Response Code from API: " + responseCode);

            if (responseCode == 200) {
                BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                String inputLine;
                StringBuilder response = new StringBuilder();

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
                in.close();

                JSONObject jsonResponse = new JSONObject(response.toString());
                JSONArray ciphersuitesArray = jsonResponse.getJSONArray("ciphersuites");

                for (int i = 0; i < ciphersuitesArray.length(); i++) {
                    JSONObject cipherSuiteObject = ciphersuitesArray.getJSONObject(i);
                    for (String cipherSuiteName : cipherSuiteObject.keySet()) {
                        JSONObject details = cipherSuiteObject.getJSONObject(cipherSuiteName);
                        String security = details.getString("security");
                        cipherSuites.put(cipherSuiteName, security);
                    }
                }
                Logger.log("CIPHERSUITY ZOSTAÅ‚Y Pobrane");
            } else {
                callbacks.printError("Failed to fetch cipher suites from API. Response code: " + responseCode);
            }
        } catch (Exception e) {
            callbacks.printError("Exception while fetching cipher suites: " + e.getMessage());
            e.printStackTrace();
        }
        return cipherSuites;
    }

    public static Set<String> getCipherSuiteNames() {
        Set<String> cipherSuiteNames = fetchCipherSuites().keySet();
        Logger.log("Cipher suite names: " + cipherSuiteNames.toString());
        return cipherSuiteNames;
    }

    public static void fetchCipherSuitesAsync(Consumer<Map<String, String>> onSuccess, Consumer<Exception> onError) {
        Callable<Map<String, String>> task = CipherSuiteInfo::fetchCipherSuites;
        new Worker<>(task, onSuccess, onError).execute();
    }
}
