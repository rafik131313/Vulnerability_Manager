package com.BrupExtensionProject.burp_extension;

import burp.*;

import javax.swing.*;
import java.awt.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class BurpExtender implements IBurpExtender, ITab {
    private IExtensionHelpers helpers;
    private UIComponents uiComponents;

    @Override
    public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks) {
        this.helpers = callbacks.getHelpers();
        PersistenceManager.setCallbacks(callbacks);
        XChartDashboard.setCallbacks(callbacks);
        Logger.setCallbacks(callbacks);

        // Ustawienie nazwy rozszerzenia
        callbacks.setExtensionName("Vulnerability Manager");

        // Inicjalizacja komponentów UI
        SwingUtilities.invokeLater(() -> {
            try {
                uiComponents = new UIComponents(callbacks);
                uiComponents.initializeComponents();
                callbacks.addSuiteTab(BurpExtender.this);

                // Load the saved screenshot folder path
                String savedScreenshotFolderPath = callbacks.loadExtensionSetting("saveScreenshotFolderPath");
                if (savedScreenshotFolderPath != null && !savedScreenshotFolderPath.isEmpty()) {
                    uiComponents.getScreenshotUtility().setSaveFolderPath(savedScreenshotFolderPath);
                    uiComponents.updateSaveScreenshotFolderPathLabel();
                }
                Logger.log("Extension initialized successfully.");
            } catch (Exception e) {
                callbacks.printError("Error initializing the extension: " + e.getMessage());
                e.printStackTrace();
            }
        });

        // Rejestracja factory do tworzenia własnych elementów menu kontekstowego
        callbacks.registerContextMenuFactory(new IContextMenuFactory() {
            @Override
            public List<JMenuItem> createMenuItems(IContextMenuInvocation invocation) {
                List<JMenuItem> menuItems = new ArrayList<>();

                JMenuItem captureScreenshotItem = new JMenuItem("Capture Screenshot");
                captureScreenshotItem.addActionListener(e -> {
                    String folderPath = uiComponents.getScreenshotUtility().getSaveFolderPath();
                    if (folderPath != null && !folderPath.isEmpty()) {
                        ScreenshotUtility screenshotUtility = uiComponents.getScreenshotUtility();
                        if (screenshotUtility.isEnableScreenshotCropping()) {
                            // Jeśli funkcja przycinania jest włączona, wywołaj metodę z przycinaniem
                            screenshotUtility.captureScreenshot(folderPath, null, null);
                        } else {
                            // Jeśli funkcja przycinania nie jest włączona, wywołaj metodę bez przycinania
                            screenshotUtility.captureScreenshot(folderPath, null, null);
                        }
                    } else {
                        callbacks.printError("Save folder path is not set. Please set it in the settings.");
                    }
                });


                JMenuItem captureFullScreenshotItem = new JMenuItem("Capture Screenshot To Host Folder");
                captureFullScreenshotItem.addActionListener(e -> {
                    IHttpRequestResponse[] selectedMessages = invocation.getSelectedMessages();
                    if (selectedMessages != null && selectedMessages.length > 0) {
                        uiComponents.getScreenshotUtility().captureFullScreenshot(selectedMessages[0]);
                    }
                });

                JMenuItem addToDashboardItem = new JMenuItem("Add to Dashboard");
                addToDashboardItem.addActionListener(e -> {
                    IScanIssue[] selectedIssues = invocation.getSelectedIssues();
                    if (selectedIssues != null && selectedIssues.length > 0) {
                        for (IScanIssue issue : selectedIssues) {
                            String vulnerabilityType = issue.getIssueName();
                            String riskLevel = issue.getSeverity();
                            URL url = issue.getUrl();
                            String discoveryTime = "Unknown";

                            IHttpRequestResponse[] httpMessages = issue.getHttpMessages();
                            String request = new String(httpMessages[0].getRequest());

                            String response = "";
                            if (httpMessages.length >= 1 && httpMessages[0].getResponse() != null) {
                                IResponseInfo responseInfo = helpers.analyzeResponse(httpMessages[0].getResponse());
                                response = new String(httpMessages[0].getResponse());

                                List<String> dateHeaders = responseInfo.getHeaders().stream()
                                        .filter(header -> header.startsWith("Date:"))
                                        .collect(Collectors.toList());
                                if (!dateHeaders.isEmpty()) {
                                    discoveryTime = dateHeaders.get(0).substring(6).trim();
                                }
                            }

                            uiComponents.getVulnerabilityManager().addVulnerability(new VulnerabilityStats(vulnerabilityType, riskLevel, url, discoveryTime, request, response, false));
                        }
                    }
                });

                byte invocationContext = invocation.getInvocationContext();
                if (invocationContext == IContextMenuInvocation.CONTEXT_MESSAGE_EDITOR_REQUEST || invocationContext == IContextMenuInvocation.CONTEXT_MESSAGE_VIEWER_REQUEST) {
                    menuItems.add(captureScreenshotItem);
                    menuItems.add(captureFullScreenshotItem);
                }
                if (invocationContext == IContextMenuInvocation.CONTEXT_SCANNER_RESULTS) {
                    menuItems.add(addToDashboardItem);
                }

                return menuItems;
            }
        });
    }

    @Override
    public String getTabCaption() {
        return "Vulnerability Manager";
    }

    @Override
    public Component getUiComponent() {
        return uiComponents.getMainPanel();
    }
}
